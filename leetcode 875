class Solution {
    
    private int findMax(int[] piles) {
        int max = Integer.MIN_VALUE;
        for (int pile : piles) {
            max = Math.max(max, pile);
        }
        return max;
    }
    private long calculateTotalHours(int[] piles, int k) {
        long totalHours = 0;
        for (int pile : piles) {
            totalHours += (pile + k - 1) / k; 
        }
        return totalHours;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = findMax(piles); 
        while (low <= high) {
            int mid = (low + high) / 2;
            long totalHours = calculateTotalHours(piles, mid);

            if (totalHours <= h) {
                high = mid - 1; 
            } else {
                low = mid + 1; 
            }
        }

        return low; 
    }
}
