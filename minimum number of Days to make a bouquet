class Solution {
    private boolean possible( int[] bloomDay,int day,int m,int k)
    {
        int n=bloomDay.length;
        int count=0;
        int nofB=0;
        for(int i=0;i<n;i++)
        {
            if(bloomDay[i]<=day)
            {
            
                    count++;
            }
            else{
                    nofB+=(count/k);
                    count=0;
                }

             
        
        }
         nofB+=(count/k);
        return nofB>=m;
    }
    public int minDays(int[] bloomDay, int m, int k)
     {
        int n=bloomDay.length;
        long val=(long)m*k;
        if (val>n) return -1;
        int maxi=Integer.MIN_VALUE,mini=Integer.MIN_VALUE;
       
        for(int i=0;i<n;i++)
        {
            maxi=Math.max(maxi,bloomDay[i]);
            mini=Math.min(mini,bloomDay[i]);
        }
        int low=mini,high=maxi,ans=maxi;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(possible(bloomDay,mid,m,k))
            {
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
       
        
      return ans;  
    }
}
